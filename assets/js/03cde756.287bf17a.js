"use strict";(self.webpackChunkhailaz_github_io=self.webpackChunkhailaz_github_io||[]).push([[991],{8043:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var o=e(7462),u=(e(7294),e(3905)),r=e(4915);const a={layout:"post",title:"gorun"},i=void 0,c={unversionedId:"learn/go/\u793a\u4f8b/gorun",id:"learn/go/\u793a\u4f8b/gorun",title:"gorun",description:"\u9650\u5236 go run \u4e2a\u6570",source:"@site/docs/learn/go/\u793a\u4f8b/gorun.mdx",sourceDirName:"learn/go/\u793a\u4f8b",slug:"/learn/go/\u793a\u4f8b/gorun",permalink:"/docs/learn/go/\u793a\u4f8b/gorun",draft:!1,editUrl:"https://github.com/hailaz/hailaz.github.io/blob/master/docs/learn/go/\u793a\u4f8b/gorun.mdx",tags:[],version:"current",frontMatter:{layout:"post",title:"gorun"},sidebar:"learn",previous:{title:"\u5224\u65ad\u662f\u5426Windows\u53cc\u51fb\u542f\u52a8",permalink:"/docs/learn/go/3"},next:{title:"goset",permalink:"/docs/learn/go/\u793a\u4f8b/goset"}},l={},p=[{value:"\u9650\u5236 go run \u4e2a\u6570",id:"\u9650\u5236-go-run-\u4e2a\u6570",level:2},{value:"\u4f7f\u7528\u7ba1\u9053",id:"\u4f7f\u7528\u7ba1\u9053",level:3},{value:"\u4f7f\u7528\u4e92\u65a5\u9501",id:"\u4f7f\u7528\u4e92\u65a5\u9501",level:3}],f={toc:p};function m(n){let{components:t,...e}=n;return(0,u.kt)("wrapper",(0,o.Z)({},f,e,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h2",{id:"\u9650\u5236-go-run-\u4e2a\u6570"},"\u9650\u5236 go run \u4e2a\u6570"),(0,u.kt)("h3",{id:"\u4f7f\u7528\u7ba1\u9053"},"\u4f7f\u7528\u7ba1\u9053"),(0,u.kt)(r.Z,{language:"go",mdxType:"CodeBlock"},'package main\n\nimport (\n\t"fmt"\n\t"math/rand"\n\t"time"\n)\n\ntype GoRun struct {\n\tch chan struct{}\n}\n\nfunc NewGoRun(maxRun int) *GoRun {\n\treturn &GoRun{ch: make(chan struct{}, maxRun)}\n}\nfunc (p *GoRun) Done() {\n\t<-p.ch\n}\n\nfunc (p *GoRun) Count() int {\n\treturn len(p.ch)\n}\n\nfunc (p *GoRun) Max() int {\n\treturn cap(p.ch)\n}\n\nfunc (p *GoRun) Run(f func()) {\n\tselect {\n\tcase p.ch <- struct{}{}:\n\t\tgo func(f func()) {\n\t\t\tdefer p.Done()\n\t\t\tf()\n\t\t}(f)\n\tdefault:\n\t\treturn\n\t}\n}\n\nfunc T() {\n\tp := NewGoRun(100)\n\tfor {\n\t\tp.Run(func() {\n\t\t\trand.Seed(time.Now().UnixNano())\n\t\t\tx := rand.Intn(100) //\u751f\u62100-99\u968f\u673a\u6574\u6570\n\t\t\ttime.Sleep(time.Millisecond * time.Duration(x))\n\t\t})\n\t\tfmt.Println(p.Count())\n\t\ttime.Sleep(time.Millisecond * 100)\n\t}\n}\n\nfunc main() {\n\tgo T()\n\tselect {}\n}\n'),(0,u.kt)("h3",{id:"\u4f7f\u7528\u4e92\u65a5\u9501"},"\u4f7f\u7528\u4e92\u65a5\u9501"),(0,u.kt)(r.Z,{language:"go",mdxType:"CodeBlock"},'package main\n\nimport (\n\t"fmt"\n\t"math/rand"\n\t"sync"\n\t"time"\n)\n\n// GoRun \u9650\u5236\u5e76\u53d1\u6570\ntype GoRun struct {\n\tmax   int\n\tcount int\n\tsync.Mutex\n}\n\nfunc NewGoRun(max int) *GoRun {\n\treturn &GoRun{max: max}\n}\n\nfunc (p *GoRun) CanRun() bool {\n\tp.Lock()\n\tdefer p.Unlock()\n\tif p.count < p.max {\n\t\tp.count++\n\t\treturn true\n\t}\n\treturn false\n}\nfunc (p *GoRun) Done() {\n\tp.Lock()\n\tdefer p.Unlock()\n\tp.count--\n}\n\nfunc (p *GoRun) Count() int {\n\treturn p.count\n}\n\nfunc (p *GoRun) Run(f func()) {\n\tif !p.CanRun() {\n\t\treturn\n\t}\n\tgo func(f func()) {\n\t\tdefer p.Done()\n\t\tf()\n\t}(f)\n}\n\nfunc T() {\n\tp := NewGoRun(100)\n\tfor {\n\t\tp.Run(func() {\n\t\t\trand.Seed(time.Now().UnixNano())\n\t\t\tx := rand.Intn(p.max * 100) //\u751f\u62100-99\u968f\u673a\u6574\u6570\n\t\t\ttime.Sleep(time.Millisecond * time.Duration(x))\n\t\t})\n\t\tfmt.Println(p.Count())\n\t\ttime.Sleep(time.Millisecond * 100)\n\t}\n}\n\nfunc main() {\n\tgo T()\n\tselect {}\n}\n'))}m.isMDXComponent=!0}}]);