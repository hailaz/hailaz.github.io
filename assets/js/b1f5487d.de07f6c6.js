"use strict";(self.webpackChunkhailaz_github_io=self.webpackChunkhailaz_github_io||[]).push([[5636],{4912:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=e(7462),o=(e(7294),e(3905)),l=e(4915);const r={title:"\u5224\u65ad\u662f\u5426Windows\u53cc\u51fb\u542f\u52a8"},s=void 0,a={unversionedId:"learn/go/3",id:"learn/go/3",title:"\u5224\u65ad\u662f\u5426Windows\u53cc\u51fb\u542f\u52a8",description:"",source:"@site/docs/learn/go/3.md",sourceDirName:"learn/go",slug:"/learn/go/3",permalink:"/docs/learn/go/3",draft:!1,editUrl:"https://github.com/hailaz/hailaz.github.io/blob/master/docs/learn/go/3.md",tags:[],version:"current",frontMatter:{title:"\u5224\u65ad\u662f\u5426Windows\u53cc\u51fb\u542f\u52a8"},sidebar:"learn",previous:{title:"\u603b\u7ed3",permalink:"/docs/learn/go/2"},next:{title:"\u6784\u5efa",permalink:"/docs/learn/go/4"}},c={},u=[],d={toc:u};function g(t){let{components:n,...e}=t;return(0,o.kt)("wrapper",(0,i.Z)({},d,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(l.Z,{language:"go",mdxType:"CodeBlock"},'// +build windows\n\n//go:generate go build -ldflags "-s -w -extldflags \'-static\'" $GOFILE\npackage main\n\nimport (\n\t"fmt"\n\t"syscall"\n\t"unsafe"\n)\n\nfunc main() {\n\tclickRun := isDoubleClickRun()\n\tfmt.Println("Double click run:", clickRun)\n\tif clickRun {\n\t\tfmt.Print("press Enter to exit")\n\t\tvar b byte\n\t\t_, _ = fmt.Scanf("%v", &b)\n\t}\n}\n\n// Detect if windows golang executable file is running via double click or from cmd/shell terminator\n//  https://stackoverflow.com/questions/8610489/distinguish-if-program-runs-by-clicking-on-the-icon-typing-its-name-in-the-cons?rq=1\n//  https://github.com/shirou/w32/blob/master/kernel32.go\n//  https://github.com/kbinani/win/blob/master/kernel32.go#L3268\n//  win.GetConsoleProcessList(new(uint32), win.DWORD(2))\nfunc isDoubleClickRun() bool {\n\tkernel32 := syscall.NewLazyDLL("kernel32.dll")\n\tlp := kernel32.NewProc("GetConsoleProcessList")\n\tif lp != nil {\n\t\tvar pids [2]uint32\n\t\tvar maxCount uint32 = 2\n\t\tret, _, _ := lp.Call(uintptr(unsafe.Pointer(&pids)), uintptr(maxCount))\n\t\tif ret > 1 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}'))}g.isMDXComponent=!0}}]);