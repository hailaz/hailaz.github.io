"use strict";(self.webpackChunkhailaz_github_io=self.webpackChunkhailaz_github_io||[]).push([[2409],{3905:(n,e,t)=>{t.d(e,{Zo:()=>f,kt:()=>p});var r=t(7294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,s=function(n,e){if(null==n)return{};var t,r,s={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var u=r.createContext({}),a=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},f=function(n){var e=a(n.components);return r.createElement(u.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,s=n.mdxType,o=n.originalType,u=n.parentName,f=l(n,["components","mdxType","originalType","parentName"]),m=a(t),p=s,d=m["".concat(u,".").concat(p)]||m[p]||c[p]||o;return t?r.createElement(d,i(i({ref:e},f),{},{components:t})):r.createElement(d,i({ref:e},f))}));function p(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l.mdxType="string"==typeof n?n:s,i[1]=l;for(var a=2;a<o;a++)i[a]=t[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},175:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var r=t(7462),s=(t(7294),t(3905));const o={layout:"post",title:"goset"},i=void 0,l={permalink:"/blog/2019/09/05/goset",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-09-05-goset.md",source:"@site/blog/2019-09-05-goset.md",title:"goset",description:"---",date:"2019-09-05T00:00:00.000Z",formattedDate:"2019\u5e749\u67085\u65e5",tags:[],readingTime:9.84,hasTruncateMarker:!1,authors:[],frontMatter:{layout:"post",title:"goset"},prevItem:{title:"gorun",permalink:"/blog/2019/09/05/gorun"},nextItem:{title:"MGR",permalink:"/blog/2019/08/20/mgr"}},u={authorsImageUrls:[]},a=[{value:"\u5982\u679c\u7528\u4e8e\u591a\u4f8b\u7a0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7248\u672c\uff1a",id:"\u5982\u679c\u7528\u4e8e\u591a\u4f8b\u7a0b\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7248\u672c",level:2},{value:"\u5982\u679c\u4e0d\u7528\u4e8e\u591a\u4f8b\u7a0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7b80\u5355\u7248\u672c\uff1a",id:"\u5982\u679c\u4e0d\u7528\u4e8e\u591a\u4f8b\u7a0b\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7b80\u5355\u7248\u672c",level:2}],f={toc:a};function c(n){let{components:e,...t}=n;return(0,s.kt)("wrapper",(0,r.Z)({},f,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"\u5982\u679c\u7528\u4e8e\u591a\u4f8b\u7a0b\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7248\u672c"},"\u5982\u679c\u7528\u4e8e\u591a\u4f8b\u7a0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7248\u672c\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'package main\n\nimport (\n    "fmt"\n    "sort"\n    "sync"\n)\n\ntype Set struct {\n    sync.RWMutex\n    m map[int]bool\n}\n\n// \u65b0\u5efa\u96c6\u5408\u5bf9\u8c61\n// \u53ef\u4ee5\u4f20\u5165\u521d\u59cb\u5143\u7d20\nfunc New(items ...int) *Set {\n    s := &Set{\n        m: make(map[int]bool, len(items)),\n    }\n    s.Add(items...)\n    return s\n}\n\n// \u521b\u5efa\u526f\u672c\nfunc (s *Set) Duplicate() *Set {\n    s.Lock()\n    defer s.Unlock()\n    r := &Set{\n        m: make(map[int]bool, len(s.m)),\n    }\n    for e := range s.m {\n        r.m[e] = true\n    }\n    return r\n}\n\n// \u6dfb\u52a0\u5143\u7d20\nfunc (s *Set) Add(items ...int) {\n    s.Lock()\n    defer s.Unlock()\n    for _, v := range items {\n        s.m[v] = true\n    }\n}\n\n// \u5220\u9664\u5143\u7d20\nfunc (s *Set) Remove(items ...int) {\n    s.Lock()\n    defer s.Unlock()\n    for _, v := range items {\n        delete(s.m, v)\n    }\n}\n\n// \u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\nfunc (s *Set) Has(items ...int) bool {\n    s.RLock()\n    defer s.RUnlock()\n    for _, v := range items {\n        if _, ok := s.m[v]; !ok {\n            return false\n        }\n    }\n    return true\n}\n\n// \u7edf\u8ba1\u5143\u7d20\u4e2a\u6570\nfunc (s *Set) Count() int {\n    s.Lock()\n    defer s.Unlock()\n    return len(s.m)\n}\n\n// \u6e05\u7a7a\u96c6\u5408\nfunc (s *Set) Clear() {\n    s.Lock()\n    defer s.Unlock()\n    s.m = map[int]bool{}\n}\n\n// \u7a7a\u96c6\u5408\u5224\u65ad\nfunc (s *Set) Empty() bool {\n    s.Lock()\n    defer s.Unlock()\n    return len(s.m) == 0\n}\n\n// \u83b7\u53d6\u5143\u7d20\u5217\u8868\uff08\u65e0\u5e8f\uff09\nfunc (s *Set) List() []int {\n    s.RLock()\n    defer s.RUnlock()\n    list := make([]int, 0, len(s.m))\n    for item := range s.m {\n        list = append(list, item)\n    }\n    return list\n}\n\n// \u83b7\u53d6\u5143\u7d20\u5217\u8868\uff08\u6709\u5e8f\uff09\nfunc (s *Set) SortedList() []int {\n    s.RLock()\n    defer s.RUnlock()\n    list := make([]int, 0, len(s.m))\n    for item := range s.m {\n        list = append(list, item)\n    }\n    sort.Ints(list)\n    return list\n}\n\n// \u5e76\u96c6\n// \u83b7\u53d6 s \u4e0e\u53c2\u6570\u7684\u5e76\u96c6\uff0c\u7ed3\u679c\u5b58\u5165 s\nfunc (s *Set) Union(sets ...*Set) {\n    // \u4e3a\u4e86\u9632\u6b62\u591a\u4f8b\u7a0b\u6b7b\u9501\uff0c\u4e0d\u80fd\u540c\u65f6\u9501\u5b9a\u4e24\u4e2a\u96c6\u5408\n    // \u6240\u4ee5\u8fd9\u91cc\u6ca1\u6709\u9501\u5b9a s\uff0c\u800c\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u4e34\u65f6\u96c6\u5408\n    r := s.Duplicate()\n    // \u83b7\u53d6\u5e76\u96c6\n    for _, set := range sets {\n        set.Lock()\n        for e := range set.m {\n            r.m[e] = true\n        }\n        set.Unlock()\n    }\n    // \u5c06\u7ed3\u679c\u8f6c\u5165 s\n    s.Lock()\n    defer s.Unlock()\n    s.m = map[int]bool{}\n    for e := range r.m {\n        s.m[e] = true\n    }\n}\n\n// \u5e76\u96c6\uff08\u51fd\u6570\uff09\n// \u83b7\u53d6\u6240\u6709\u53c2\u6570\u7684\u5e76\u96c6\uff0c\u5e76\u8fd4\u56de\nfunc Union(sets ...*Set) *Set {\n    // \u5904\u7406\u53c2\u6570\u6570\u91cf\n    if len(sets) == 0 {\n        return New()\n    } else if len(sets) == 1 {\n        return sets[0]\n    }\n    // \u83b7\u53d6\u5e76\u96c6\n    r := sets[0].Duplicate()\n    for _, set := range sets[1:] {\n        set.Lock()\n        for e := range set.m {\n            r.m[e] = true\n        }\n        set.Unlock()\n    }\n    return r\n}\n\n// \u5dee\u96c6\n// \u83b7\u53d6 s \u4e0e\u6240\u6709\u53c2\u6570\u7684\u5dee\u96c6\uff0c\u7ed3\u679c\u5b58\u5165 s\nfunc (s *Set) Minus(sets ...*Set) {\n    // \u4e3a\u4e86\u9632\u6b62\u591a\u4f8b\u7a0b\u6b7b\u9501\uff0c\u4e0d\u80fd\u540c\u65f6\u9501\u5b9a\u4e24\u4e2a\u96c6\u5408\n    // \u6240\u4ee5\u8fd9\u91cc\u6ca1\u6709\u9501\u5b9a s\uff0c\u800c\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u4e34\u65f6\u96c6\u5408\n    r := s.Duplicate()\n    // \u83b7\u53d6\u5dee\u96c6\n    for _, set := range sets {\n        set.Lock()\n        for e := range set.m {\n            delete(r.m, e)\n        }\n        set.Unlock()\n    }\n    // \u5c06\u7ed3\u679c\u8f6c\u5165 s\n    s.Lock()\n    defer s.Unlock()\n    s.m = map[int]bool{}\n    for e := range r.m {\n        s.m[e] = true\n    }\n}\n\n// \u5dee\u96c6\uff08\u51fd\u6570\uff09\n// \u83b7\u53d6\u7b2c 1 \u4e2a\u53c2\u6570\u4e0e\u5176\u5b83\u53c2\u6570\u7684\u5dee\u96c6\uff0c\u5e76\u8fd4\u56de\nfunc Minus(sets ...*Set) *Set {\n    // \u5904\u7406\u53c2\u6570\u6570\u91cf\n    if len(sets) == 0 {\n        return New()\n    } else if len(sets) == 1 {\n        return sets[0]\n    }\n    // \u83b7\u53d6\u5dee\u96c6\n    r := sets[0].Duplicate()\n    for _, set := range sets[1:] {\n        for e := range set.m {\n            delete(r.m, e)\n        }\n    }\n    return r\n}\n\n// \u4ea4\u96c6\n// \u83b7\u53d6 s \u4e0e\u5176\u5b83\u53c2\u6570\u7684\u4ea4\u96c6\uff0c\u7ed3\u679c\u5b58\u5165 s\nfunc (s *Set) Intersect(sets ...*Set) {\n    // \u4e3a\u4e86\u9632\u6b62\u591a\u4f8b\u7a0b\u6b7b\u9501\uff0c\u4e0d\u80fd\u540c\u65f6\u9501\u5b9a\u4e24\u4e2a\u96c6\u5408\n    // \u6240\u4ee5\u8fd9\u91cc\u6ca1\u6709\u9501\u5b9a s\uff0c\u800c\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u4e34\u65f6\u96c6\u5408\n    r := s.Duplicate()\n    // \u83b7\u53d6\u4ea4\u96c6\n    for _, set := range sets {\n        set.Lock()\n        for e := range r.m {\n            if _, ok := set.m[e]; !ok {\n                delete(r.m, e)\n            }\n        }\n        set.Unlock()\n    }\n    // \u5c06\u7ed3\u679c\u8f6c\u5165 s\n    s.Lock()\n    defer s.Unlock()\n    s.m = map[int]bool{}\n    for e := range r.m {\n        s.m[e] = true\n    }\n}\n\n// \u4ea4\u96c6\uff08\u51fd\u6570\uff09\n// \u83b7\u53d6\u6240\u6709\u53c2\u6570\u7684\u4ea4\u96c6\uff0c\u5e76\u8fd4\u56de\nfunc Intersect(sets ...*Set) *Set {\n    // \u5904\u7406\u53c2\u6570\u6570\u91cf\n    if len(sets) == 0 {\n        return New()\n    } else if len(sets) == 1 {\n        return sets[0]\n    }\n    // \u83b7\u53d6\u4ea4\u96c6\n    r := sets[0].Duplicate()\n    for _, set := range sets[1:] {\n        for e := range r.m {\n            if _, ok := set.m[e]; !ok {\n                delete(r.m, e)\n            }\n        }\n    }\n    return r\n}\n\n// \u8865\u96c6\n// \u83b7\u53d6 s \u76f8\u5bf9\u4e8e full \u7684\u8865\u96c6\uff0c\u7ed3\u679c\u5b58\u5165 s\nfunc (s *Set) Complement(full *Set) {\n    r := full.Duplicate()\n    s.Lock()\n    defer s.Unlock()\n    // \u83b7\u53d6\u8865\u96c6\n    for e := range s.m {\n        delete(r.m, e)\n    }\n    // \u5c06\u7ed3\u679c\u8f6c\u5165 s\n    s.m = map[int]bool{}\n    for e := range r.m {\n        s.m[e] = true\n    }\n}\n\n// \u8865\u96c6\uff08\u51fd\u6570\uff09\n// \u83b7\u53d6 sub \u76f8\u5bf9\u4e8e full \u7684\u8865\u96c6\uff0c\u5e76\u8fd4\u56de\nfunc Complement(sub, full *Set) *Set {\n    r := full.Duplicate()\n    sub.Lock()\n    defer sub.Unlock()\n    for e := range sub.m {\n        delete(r.m, e)\n    }\n    return r\n}\n\nfunc main() {\n    s1 := New(1, 2, 3, 4, 5, 6, 7, 8)\n    s2 := New(3, 4, 5, 6)\n    s3 := New(1, 2, 5, 6, 8, 9)\n\n    // \u521b\u5efa 10 \u4e2a goroutine \u540c\u6b65\u64cd\u4f5c s2\uff0c\u770b\u4f1a\u4e0d\u4f1a\u6b7b\u9501\n    wg := sync.WaitGroup{}\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func(n int) {\n            for i := 0; i < 100; i++ {\n                s2.Union(s1) // \u83b7\u53d6\u5e76\u96c6\n                fmt.Printf("%2v\uff1as2 + %v = %v\\n", n, s1.SortedList(), s2.SortedList())\n\n                s2.Minus(s3) // \u83b7\u53d6\u5dee\u96c6\n                fmt.Printf("%2v\uff1as2 - %v = %v\\n", n, s3.SortedList(), s2.SortedList())\n\n                s2.Intersect(s1) // \u83b7\u53d6\u4ea4\u96c6\n                fmt.Printf("%2v\uff1as2 * %v = %v\\n", n, s1.SortedList(), s2.SortedList())\n\n                s2.Complement(s1) // \u83b7\u53d6 s2 \u76f8\u5bf9\u4e8e s1 \u7684\u8865\u96c6\n                fmt.Printf("%2v\uff1a%v / s2 = %v\\n", n, s1.SortedList(), s2.SortedList())\n            }\n            wg.Done()\n        }(i)\n    }\n    wg.Wait()\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"\u5982\u679c\u4e0d\u7528\u4e8e\u591a\u4f8b\u7a0b\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7b80\u5355\u7248\u672c"},"\u5982\u679c\u4e0d\u7528\u4e8e\u591a\u4f8b\u7a0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7b80\u5355\u7248\u672c\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'package main\n\nimport (\n    "fmt"\n    "sort"\n)\n\ntype Set map[int]bool\n\n// \u65b0\u5efa\u96c6\u5408\u5bf9\u8c61\n// \u53ef\u4ee5\u4f20\u5165\u521d\u59cb\u5143\u7d20\nfunc New(items ...int) Set {\n    s := make(Set, len(items))\n    s.Add(items...)\n    return s\n}\n\n// \u521b\u5efa\u526f\u672c\nfunc (s Set) Duplicate() Set {\n    r := make(map[int]bool, len(s))\n    for e := range s {\n        r[e] = true\n    }\n    return r\n}\n\n// \u6dfb\u52a0\u5143\u7d20\nfunc (s Set) Add(items ...int) {\n    for _, v := range items {\n        s[v] = true\n    }\n}\n\n// \u5220\u9664\u5143\u7d20\nfunc (s Set) Remove(items ...int) {\n    for _, v := range items {\n        delete(s, v)\n    }\n}\n\n// \u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\nfunc (s Set) Has(items ...int) bool {\n    for _, v := range items {\n        if _, ok := s[v]; !ok {\n            return false\n        }\n    }\n    return true\n}\n\n// \u7edf\u8ba1\u5143\u7d20\u4e2a\u6570\nfunc (s Set) Count() int {\n    return len(s)\n}\n\n// \u6e05\u7a7a\u96c6\u5408\nfunc (s Set) Clear() {\n    s = map[int]bool{}\n}\n\n// \u7a7a\u96c6\u5408\u5224\u65ad\nfunc (s Set) Empty() bool {\n    return len(s) == 0\n}\n\n// \u83b7\u53d6\u5143\u7d20\u5217\u8868\uff08\u65e0\u5e8f\uff09\nfunc (s Set) List() []int {\n    list := make([]int, 0, len(s))\n    for item := range s {\n        list = append(list, item)\n    }\n    return list\n}\n\n// \u83b7\u53d6\u5143\u7d20\u5217\u8868\uff08\u6709\u5e8f\uff09\nfunc (s Set) SortedList() []int {\n    list := s.List()\n    sort.Ints(list)\n    return list\n}\n\n// \u5e76\u96c6\n// \u83b7\u53d6 s \u4e0e\u53c2\u6570\u7684\u5e76\u96c6\uff0c\u7ed3\u679c\u5b58\u5165 s\nfunc (s Set) Union(sets ...Set) {\n    for _, set := range sets {\n        for e := range set {\n            s[e] = true\n        }\n    }\n}\n\n// \u5e76\u96c6\uff08\u51fd\u6570\uff09\n// \u83b7\u53d6\u6240\u6709\u53c2\u6570\u7684\u5e76\u96c6\uff0c\u5e76\u8fd4\u56de\nfunc Union(sets ...Set) Set {\n    // \u5904\u7406\u53c2\u6570\u6570\u91cf\n    if len(sets) == 0 {\n        return New()\n    } else if len(sets) == 1 {\n        return sets[0]\n    }\n    // \u83b7\u53d6\u5e76\u96c6\n    r := sets[0].Duplicate()\n    for _, set := range sets[1:] {\n        for e := range set {\n            r[e] = true\n        }\n    }\n    return r\n}\n\n// \u5dee\u96c6\n// \u83b7\u53d6 s \u4e0e\u6240\u6709\u53c2\u6570\u7684\u5dee\u96c6\uff0c\u7ed3\u679c\u5b58\u5165 s\nfunc (s Set) Minus(sets ...Set) {\n    for _, set := range sets {\n        for e := range set {\n            delete(s, e)\n        }\n    }\n}\n\n// \u5dee\u96c6\uff08\u51fd\u6570\uff09\n// \u83b7\u53d6\u7b2c 1 \u4e2a\u53c2\u6570\u4e0e\u5176\u5b83\u53c2\u6570\u7684\u5dee\u96c6\uff0c\u5e76\u8fd4\u56de\nfunc Minus(sets ...Set) Set {\n    // \u5904\u7406\u53c2\u6570\u6570\u91cf\n    if len(sets) == 0 {\n        return New()\n    } else if len(sets) == 1 {\n        return sets[0]\n    }\n    // \u83b7\u53d6\u5dee\u96c6\n    r := sets[0].Duplicate()\n    for _, set := range sets[1:] {\n        for e := range set {\n            delete(r, e)\n        }\n    }\n    return r\n}\n\n// \u4ea4\u96c6\n// \u83b7\u53d6 s \u4e0e\u5176\u5b83\u53c2\u6570\u7684\u4ea4\u96c6\uff0c\u7ed3\u679c\u5b58\u5165 s\nfunc (s Set) Intersect(sets ...Set) {\n    for _, set := range sets {\n        for e := range s {\n            if _, ok := set[e]; !ok {\n                delete(s, e)\n            }\n        }\n    }\n}\n\n// \u4ea4\u96c6\uff08\u51fd\u6570\uff09\n// \u83b7\u53d6\u6240\u6709\u53c2\u6570\u7684\u4ea4\u96c6\uff0c\u5e76\u8fd4\u56de\nfunc Intersect(sets ...Set) Set {\n    // \u5904\u7406\u53c2\u6570\u6570\u91cf\n    if len(sets) == 0 {\n        return New()\n    } else if len(sets) == 1 {\n        return sets[0]\n    }\n    // \u83b7\u53d6\u4ea4\u96c6\n    r := sets[0].Duplicate()\n    for _, set := range sets[1:] {\n        for e := range r {\n            if _, ok := set[e]; !ok {\n                delete(r, e)\n            }\n        }\n    }\n    return r\n}\n\n// \u8865\u96c6\n// \u83b7\u53d6 s \u76f8\u5bf9\u4e8e full \u7684\u8865\u96c6\uff0c\u7ed3\u679c\u5b58\u5165 s\nfunc (s Set) Complement(full Set) {\n    r := s.Duplicate()\n    s.Clear()\n    for e := range full {\n        if _, ok := r[e]; !ok {\n            s[e] = true\n        }\n    }\n}\n\n// \u8865\u96c6\uff08\u51fd\u6570\uff09\n// \u83b7\u53d6 sub \u76f8\u5bf9\u4e8e full \u7684\u8865\u96c6\uff0c\u5e76\u8fd4\u56de\nfunc Complement(sub, full Set) Set {\n    r := full.Duplicate()\n    for e := range sub {\n        delete(r, e)\n    }\n    return r\n}\n\nfunc main() {\n    s1 := New(1, 2, 3, 4, 5, 6, 7, 8)\n    s2 := New(3, 4, 5, 6)\n    s3 := New(5, 6, 8, 9)\n    r1 := Union(s1, s2, s3)     // \u83b7\u53d6\u5e76\u96c6\n    r2 := Minus(s1, s2, s3)     // \u83b7\u53d6\u5dee\u96c6\n    r3 := Intersect(s1, s2, s3) // \u83b7\u53d6\u4ea4\u96c6\n    r4 := Complement(s2, s1)    // \u83b7\u53d6 s2 \u76f8\u5bf9\u4e8e s1 \u7684\u8865\u96c6\n    fmt.Println(r1.SortedList())\n    fmt.Println(r2.SortedList())\n    fmt.Println(r3.SortedList())\n    fmt.Println(r4.SortedList())\n}\n')))}c.isMDXComponent=!0}}]);